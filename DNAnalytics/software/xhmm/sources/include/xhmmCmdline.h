/** @file xhmmCmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.5
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef XHMMCMDLINE_H
#define XHMMCMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "xhmm"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "xhmm"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "1.0"
#endif

enum enum_centerType { centerType__NULL = -1, centerType_arg_target = 0, centerType_arg_sample };
enum enum_PCnormalizeMethod { PCnormalizeMethod__NULL = -1, PCnormalizeMethod_arg_numPCtoRemove = 0, PCnormalizeMethod_arg_PVE_mean, PCnormalizeMethod_arg_PVE_contrib };

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *detailed_help_help; /**< @brief Print help, including all details and hidden options, and exit help description.  */
  const char *full_help_help; /**< @brief Print help, including hidden options, and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * referenceFASTA_arg;	/**< @brief Reference FASTA file (MUST have .fai index file).  */
  char * referenceFASTA_orig;	/**< @brief Reference FASTA file (MUST have .fai index file) original value given at command line.  */
  const char *referenceFASTA_help; /**< @brief Reference FASTA file (MUST have .fai index file) help description.  */
  char * readDepths_arg;	/**< @brief Matrix of *input* read-depths, where rows (samples) and columns (targets) are labeled (default='-').  */
  char * readDepths_orig;	/**< @brief Matrix of *input* read-depths, where rows (samples) and columns (targets) are labeled original value given at command line.  */
  const char *readDepths_help; /**< @brief Matrix of *input* read-depths, where rows (samples) and columns (targets) are labeled help description.  */
  const char *prepareTargets_help; /**< @brief  help description.  */
  char ** targets_arg;	/**< @brief Input targets lists.  */
  char ** targets_orig;	/**< @brief Input targets lists original value given at command line.  */
  unsigned int targets_min; /**< @brief Input targets lists's minimum occurreces */
  unsigned int targets_max; /**< @brief Input targets lists's maximum occurreces */
  const char *targets_help; /**< @brief Input targets lists help description.  */
  char * mergedTargets_arg;	/**< @brief Output targets list (default='-').  */
  char * mergedTargets_orig;	/**< @brief Output targets list original value given at command line.  */
  const char *mergedTargets_help; /**< @brief Output targets list help description.  */
  const char *mergeGATKdepths_help; /**< @brief  help description.  */
  char ** GATKdepths_arg;	/**< @brief GATK sample_interval_summary output file(s) to be merged [must have *IDENTICAL* target lists].  */
  char ** GATKdepths_orig;	/**< @brief GATK sample_interval_summary output file(s) to be merged [must have *IDENTICAL* target lists] original value given at command line.  */
  unsigned int GATKdepths_min; /**< @brief GATK sample_interval_summary output file(s) to be merged [must have *IDENTICAL* target lists]'s minimum occurreces */
  unsigned int GATKdepths_max; /**< @brief GATK sample_interval_summary output file(s) to be merged [must have *IDENTICAL* target lists]'s maximum occurreces */
  const char *GATKdepths_help; /**< @brief GATK sample_interval_summary output file(s) to be merged [must have *IDENTICAL* target lists] help description.  */
  char ** GATKdepthsList_arg;	/**< @brief A file containing a list of GATK sample_interval_summary output files to be merged [must have *IDENTICAL* target lists].  */
  char ** GATKdepthsList_orig;	/**< @brief A file containing a list of GATK sample_interval_summary output files to be merged [must have *IDENTICAL* target lists] original value given at command line.  */
  unsigned int GATKdepthsList_min; /**< @brief A file containing a list of GATK sample_interval_summary output files to be merged [must have *IDENTICAL* target lists]'s minimum occurreces */
  unsigned int GATKdepthsList_max; /**< @brief A file containing a list of GATK sample_interval_summary output files to be merged [must have *IDENTICAL* target lists]'s maximum occurreces */
  const char *GATKdepthsList_help; /**< @brief A file containing a list of GATK sample_interval_summary output files to be merged [must have *IDENTICAL* target lists] help description.  */
  char * sampleIDmap_arg;	/**< @brief File containing mappings of sample names to new sample names (in columns designated by fromID, toID).  */
  char * sampleIDmap_orig;	/**< @brief File containing mappings of sample names to new sample names (in columns designated by fromID, toID) original value given at command line.  */
  const char *sampleIDmap_help; /**< @brief File containing mappings of sample names to new sample names (in columns designated by fromID, toID) help description.  */
  int fromID_arg;	/**< @brief Column number of OLD sample IDs to map (default='1').  */
  char * fromID_orig;	/**< @brief Column number of OLD sample IDs to map original value given at command line.  */
  const char *fromID_help; /**< @brief Column number of OLD sample IDs to map help description.  */
  int toID_arg;	/**< @brief Column number of NEW sample IDs to map (default='2').  */
  char * toID_orig;	/**< @brief Column number of NEW sample IDs to map original value given at command line.  */
  const char *toID_help; /**< @brief Column number of NEW sample IDs to map help description.  */
  char * columnSuffix_arg;	/**< @brief Suffix of columns to be used for merging [where columns are in the form: SAMPLE + columnSuffix] (default='_mean_cvg').  */
  char * columnSuffix_orig;	/**< @brief Suffix of columns to be used for merging [where columns are in the form: SAMPLE + columnSuffix] original value given at command line.  */
  const char *columnSuffix_help; /**< @brief Suffix of columns to be used for merging [where columns are in the form: SAMPLE + columnSuffix] help description.  */
  int rdPrecision_arg;	/**< @brief Decimal precision of read depths output (default='2').  */
  char * rdPrecision_orig;	/**< @brief Decimal precision of read depths output original value given at command line.  */
  const char *rdPrecision_help; /**< @brief Decimal precision of read depths output help description.  */
  int outputTargetsBySamples_flag;	/**< @brief Output targets x samples (instead of samples x targets) (default=off).  */
  const char *outputTargetsBySamples_help; /**< @brief Output targets x samples (instead of samples x targets) help description.  */
  const char *matrix_help; /**< @brief  help description.  */
  char ** excludeTargets_arg;	/**< @brief File(s) of targets to exclude.  */
  char ** excludeTargets_orig;	/**< @brief File(s) of targets to exclude original value given at command line.  */
  unsigned int excludeTargets_min; /**< @brief File(s) of targets to exclude's minimum occurreces */
  unsigned int excludeTargets_max; /**< @brief File(s) of targets to exclude's maximum occurreces */
  const char *excludeTargets_help; /**< @brief File(s) of targets to exclude help description.  */
  char ** excludeChromosomeTargets_arg;	/**< @brief Target chromosome(s) to exclude.  */
  char ** excludeChromosomeTargets_orig;	/**< @brief Target chromosome(s) to exclude original value given at command line.  */
  unsigned int excludeChromosomeTargets_min; /**< @brief Target chromosome(s) to exclude's minimum occurreces */
  unsigned int excludeChromosomeTargets_max; /**< @brief Target chromosome(s) to exclude's maximum occurreces */
  const char *excludeChromosomeTargets_help; /**< @brief Target chromosome(s) to exclude help description.  */
  char ** excludeSamples_arg;	/**< @brief File(s) of samples to exclude.  */
  char ** excludeSamples_orig;	/**< @brief File(s) of samples to exclude original value given at command line.  */
  unsigned int excludeSamples_min; /**< @brief File(s) of samples to exclude's minimum occurreces */
  unsigned int excludeSamples_max; /**< @brief File(s) of samples to exclude's maximum occurreces */
  const char *excludeSamples_help; /**< @brief File(s) of samples to exclude help description.  */
  int minTargetSize_arg;	/**< @brief Minimum size of target (in bp) to process (default='0').  */
  char * minTargetSize_orig;	/**< @brief Minimum size of target (in bp) to process original value given at command line.  */
  const char *minTargetSize_help; /**< @brief Minimum size of target (in bp) to process help description.  */
  int maxTargetSize_arg;	/**< @brief Maximum size of target (in bp) to process.  */
  char * maxTargetSize_orig;	/**< @brief Maximum size of target (in bp) to process original value given at command line.  */
  const char *maxTargetSize_help; /**< @brief Maximum size of target (in bp) to process help description.  */
  double minMeanTargetRD_arg;	/**< @brief Minimum per-target mean RD to require for target to be processed.  */
  char * minMeanTargetRD_orig;	/**< @brief Minimum per-target mean RD to require for target to be processed original value given at command line.  */
  const char *minMeanTargetRD_help; /**< @brief Minimum per-target mean RD to require for target to be processed help description.  */
  double maxMeanTargetRD_arg;	/**< @brief Maximum per-target mean RD to require for target to be processed.  */
  char * maxMeanTargetRD_orig;	/**< @brief Maximum per-target mean RD to require for target to be processed original value given at command line.  */
  const char *maxMeanTargetRD_help; /**< @brief Maximum per-target mean RD to require for target to be processed help description.  */
  double minSdTargetRD_arg;	/**< @brief Minimum per-target standard deviation of RD to require for target to be processed (default='0').  */
  char * minSdTargetRD_orig;	/**< @brief Minimum per-target standard deviation of RD to require for target to be processed original value given at command line.  */
  const char *minSdTargetRD_help; /**< @brief Minimum per-target standard deviation of RD to require for target to be processed help description.  */
  double maxSdTargetRD_arg;	/**< @brief Maximum per-target standard deviation of RD to require for target to be processed.  */
  char * maxSdTargetRD_orig;	/**< @brief Maximum per-target standard deviation of RD to require for target to be processed original value given at command line.  */
  const char *maxSdTargetRD_help; /**< @brief Maximum per-target standard deviation of RD to require for target to be processed help description.  */
  double minMeanSampleRD_arg;	/**< @brief Minimum per-sample mean RD to require for sample to be processed.  */
  char * minMeanSampleRD_orig;	/**< @brief Minimum per-sample mean RD to require for sample to be processed original value given at command line.  */
  const char *minMeanSampleRD_help; /**< @brief Minimum per-sample mean RD to require for sample to be processed help description.  */
  double maxMeanSampleRD_arg;	/**< @brief Maximum per-sample mean RD to require for sample to be processed.  */
  char * maxMeanSampleRD_orig;	/**< @brief Maximum per-sample mean RD to require for sample to be processed original value given at command line.  */
  const char *maxMeanSampleRD_help; /**< @brief Maximum per-sample mean RD to require for sample to be processed help description.  */
  double minSdSampleRD_arg;	/**< @brief Minimum per-sample standard deviation of RD to require for sample to be processed (default='0').  */
  char * minSdSampleRD_orig;	/**< @brief Minimum per-sample standard deviation of RD to require for sample to be processed original value given at command line.  */
  const char *minSdSampleRD_help; /**< @brief Minimum per-sample standard deviation of RD to require for sample to be processed help description.  */
  double maxSdSampleRD_arg;	/**< @brief Maximum per-sample standard deviation of RD to require for sample to be processed.  */
  char * maxSdSampleRD_orig;	/**< @brief Maximum per-sample standard deviation of RD to require for sample to be processed original value given at command line.  */
  const char *maxSdSampleRD_help; /**< @brief Maximum per-sample standard deviation of RD to require for sample to be processed help description.  */
  int centerData_flag;	/**< @brief Output sample- or target- centered read-depth matrix (as per --centerType) (default=off).  */
  const char *centerData_help; /**< @brief Output sample- or target- centered read-depth matrix (as per --centerType) help description.  */
  enum enum_centerType centerType_arg;	/**< @brief If --centerData given, then center the data around this dimension.  */
  char * centerType_orig;	/**< @brief If --centerData given, then center the data around this dimension original value given at command line.  */
  const char *centerType_help; /**< @brief If --centerData given, then center the data around this dimension help description.  */
  int zScoreData_flag;	/**< @brief If --centerData given, then additionally normalize by standard deviation (outputting z-scores) (default=off).  */
  const char *zScoreData_help; /**< @brief If --centerData given, then additionally normalize by standard deviation (outputting z-scores) help description.  */
  char * outputExcludedTargets_arg;	/**< @brief File in which to output targets excluded by some criterion.  */
  char * outputExcludedTargets_orig;	/**< @brief File in which to output targets excluded by some criterion original value given at command line.  */
  const char *outputExcludedTargets_help; /**< @brief File in which to output targets excluded by some criterion help description.  */
  char * outputExcludedSamples_arg;	/**< @brief File in which to output samples excluded by some criterion.  */
  char * outputExcludedSamples_orig;	/**< @brief File in which to output samples excluded by some criterion original value given at command line.  */
  const char *outputExcludedSamples_help; /**< @brief File in which to output samples excluded by some criterion help description.  */
  char * outputMatrix_arg;	/**< @brief Read-depth matrix output file (default='-').  */
  char * outputMatrix_orig;	/**< @brief Read-depth matrix output file original value given at command line.  */
  const char *outputMatrix_help; /**< @brief Read-depth matrix output file help description.  */
  const char *PCA_help; /**< @brief Matrix is read from --readDepths argument; normalization factors sent to --PCAfiles argument help description.  */
  char * PCA_saveMemory_arg;	/**< @brief Should XHMM save memory by storing some of the intermediate PCA matrices as temporary files on disk? (default='').  */
  char * PCA_saveMemory_orig;	/**< @brief Should XHMM save memory by storing some of the intermediate PCA matrices as temporary files on disk? original value given at command line.  */
  const char *PCA_saveMemory_help; /**< @brief Should XHMM save memory by storing some of the intermediate PCA matrices as temporary files on disk? help description.  */
  const char *normalize_help; /**< @brief Matrix is read from --readDepths argument; normalization factors read from --PCAfiles argument help description.  */
  char * normalizeOutput_arg;	/**< @brief Normalized read-depth matrix output file (default='-').  */
  char * normalizeOutput_orig;	/**< @brief Normalized read-depth matrix output file original value given at command line.  */
  const char *normalizeOutput_help; /**< @brief Normalized read-depth matrix output file help description.  */
  enum enum_PCnormalizeMethod PCnormalizeMethod_arg;	/**< @brief Method to choose which prinicipal components are removed for data normalization (default='PVE_mean').  */
  char * PCnormalizeMethod_orig;	/**< @brief Method to choose which prinicipal components are removed for data normalization original value given at command line.  */
  const char *PCnormalizeMethod_help; /**< @brief Method to choose which prinicipal components are removed for data normalization help description.  */
  int numPCtoRemove_arg;	/**< @brief Number of highest principal components to filter out (default='20').  */
  char * numPCtoRemove_orig;	/**< @brief Number of highest principal components to filter out original value given at command line.  */
  const char *numPCtoRemove_help; /**< @brief Number of highest principal components to filter out help description.  */
  double PVE_mean_factor_arg;	/**< @brief Remove all principal components that individually explain more variance than this factor times the average (in the original PCA-ed data) (default='0.7').  */
  char * PVE_mean_factor_orig;	/**< @brief Remove all principal components that individually explain more variance than this factor times the average (in the original PCA-ed data) original value given at command line.  */
  const char *PVE_mean_factor_help; /**< @brief Remove all principal components that individually explain more variance than this factor times the average (in the original PCA-ed data) help description.  */
  double PVE_contrib_arg;	/**< @brief Remove the smallest number of principal components that explain this percent of the variance (in the original PCA-ed data) (default='50').  */
  char * PVE_contrib_orig;	/**< @brief Remove the smallest number of principal components that explain this percent of the variance (in the original PCA-ed data) original value given at command line.  */
  const char *PVE_contrib_help; /**< @brief Remove the smallest number of principal components that explain this percent of the variance (in the original PCA-ed data) help description.  */
  char * PCAfiles_arg;	/**< @brief Base file name for 'PCA' *output*, and 'normalize' *input*.  */
  char * PCAfiles_orig;	/**< @brief Base file name for 'PCA' *output*, and 'normalize' *input* original value given at command line.  */
  const char *PCAfiles_help; /**< @brief Base file name for 'PCA' *output*, and 'normalize' *input* help description.  */
  const char *createDB_help; /**< @brief  help description.  */
  const char *discover_help; /**< @brief Matrix is read from --readDepths argument help description.  */
  char * xcnv_arg;	/**< @brief CNV output file (default='-').  */
  char * xcnv_orig;	/**< @brief CNV output file original value given at command line.  */
  const char *xcnv_help; /**< @brief CNV output file help description.  */
  const char *optDiscover_help; /**< @brief Optimize input HMM parameters before discovering CNVs help description.  */
  double discoverSomeQualThresh_arg;	/**< @brief Quality threshold for discovering a CNV in a sample (default='30').  */
  char * discoverSomeQualThresh_orig;	/**< @brief Quality threshold for discovering a CNV in a sample original value given at command line.  */
  const char *discoverSomeQualThresh_help; /**< @brief Quality threshold for discovering a CNV in a sample help description.  */
  char * posteriorFiles_arg;	/**< @brief Base file name for posterior probabilities output files; if not given, and --xcnv is not '-', this will default to --xcnv argument.  */
  char * posteriorFiles_orig;	/**< @brief Base file name for posterior probabilities output files; if not given, and --xcnv is not '-', this will default to --xcnv argument original value given at command line.  */
  const char *posteriorFiles_help; /**< @brief Base file name for posterior probabilities output files; if not given, and --xcnv is not '-', this will default to --xcnv argument help description.  */
  const char *genotype_help; /**< @brief Matrix is read from --readDepths argument help description.  */
  char * gxcnv_arg;	/**< @brief xhmm CNV input file to genotype in 'readDepths' sample.  */
  char * gxcnv_orig;	/**< @brief xhmm CNV input file to genotype in 'readDepths' sample original value given at command line.  */
  const char *gxcnv_help; /**< @brief xhmm CNV input file to genotype in 'readDepths' sample help description.  */
  char * vcf_arg;	/**< @brief Genotyped CNV output VCF file (default='-').  */
  char * vcf_orig;	/**< @brief Genotyped CNV output VCF file original value given at command line.  */
  const char *vcf_help; /**< @brief Genotyped CNV output VCF file help description.  */
  int subsegments_flag;	/**< @brief In addition to genotyping the intervals specified in gxcnv, genotype all sub-segments of these intervals (with maxTargetsInSubsegment or fewer targets) (default=off).  */
  const char *subsegments_help; /**< @brief In addition to genotyping the intervals specified in gxcnv, genotype all sub-segments of these intervals (with maxTargetsInSubsegment or fewer targets) help description.  */
  int maxTargetsInSubsegment_arg;	/**< @brief When genotyping sub-segments of input intervals, only consider sub-segments consisting of this number of targets or fewer (default='30').  */
  char * maxTargetsInSubsegment_orig;	/**< @brief When genotyping sub-segments of input intervals, only consider sub-segments consisting of this number of targets or fewer original value given at command line.  */
  const char *maxTargetsInSubsegment_help; /**< @brief When genotyping sub-segments of input intervals, only consider sub-segments consisting of this number of targets or fewer help description.  */
  double genotypeQualThresholdWhenNoExact_arg;	/**< @brief Quality threshold for calling a genotype, used *ONLY* when 'gxcnv' does not contain the 'Q_EXACT' field for the interval being genotyped (default='20').  */
  char * genotypeQualThresholdWhenNoExact_orig;	/**< @brief Quality threshold for calling a genotype, used *ONLY* when 'gxcnv' does not contain the 'Q_EXACT' field for the interval being genotyped original value given at command line.  */
  const char *genotypeQualThresholdWhenNoExact_help; /**< @brief Quality threshold for calling a genotype, used *ONLY* when 'gxcnv' does not contain the 'Q_EXACT' field for the interval being genotyped help description.  */
  char * paramFile_arg;	/**< @brief (Initial) model parameters file.  */
  char * paramFile_orig;	/**< @brief (Initial) model parameters file original value given at command line.  */
  const char *paramFile_help; /**< @brief (Initial) model parameters file help description.  */
  char * DB_arg;	/**< @brief Database storage file.  */
  char * DB_orig;	/**< @brief Database storage file original value given at command line.  */
  const char *DB_help; /**< @brief Database storage file help description.  */
  double maxNormalizedReadDepthVal_arg;	/**< @brief Value at which to cap the absolute value of *normalized* input read depth values ('readDepths') (default='10').  */
  char * maxNormalizedReadDepthVal_orig;	/**< @brief Value at which to cap the absolute value of *normalized* input read depth values ('readDepths') original value given at command line.  */
  const char *maxNormalizedReadDepthVal_help; /**< @brief Value at which to cap the absolute value of *normalized* input read depth values ('readDepths') help description.  */
  double maxQualScore_arg;	/**< @brief Value at which to cap the calculated quality scores (default='99').  */
  char * maxQualScore_orig;	/**< @brief Value at which to cap the calculated quality scores original value given at command line.  */
  const char *maxQualScore_help; /**< @brief Value at which to cap the calculated quality scores help description.  */
  int scorePrecision_arg;	/**< @brief Decimal precision of quality scores (default='0').  */
  char * scorePrecision_orig;	/**< @brief Decimal precision of quality scores original value given at command line.  */
  const char *scorePrecision_help; /**< @brief Decimal precision of quality scores help description.  */
  char * aux_xcnv_arg;	/**< @brief Auxiliary CNV output file (may be VERY LARGE in 'genotype' mode).  */
  char * aux_xcnv_orig;	/**< @brief Auxiliary CNV output file (may be VERY LARGE in 'genotype' mode) original value given at command line.  */
  const char *aux_xcnv_help; /**< @brief Auxiliary CNV output file (may be VERY LARGE in 'genotype' mode) help description.  */
  int auxUpstreamPrintTargs_arg;	/**< @brief Number of targets to print upstream of CNV in 'auxOutput' file (default='2').  */
  char * auxUpstreamPrintTargs_orig;	/**< @brief Number of targets to print upstream of CNV in 'auxOutput' file original value given at command line.  */
  const char *auxUpstreamPrintTargs_help; /**< @brief Number of targets to print upstream of CNV in 'auxOutput' file help description.  */
  int auxDownstreamPrintTargs_arg;	/**< @brief Number of targets to print downstream of CNV in 'auxOutput' file (default='2').  */
  char * auxDownstreamPrintTargs_orig;	/**< @brief Number of targets to print downstream of CNV in 'auxOutput' file original value given at command line.  */
  const char *auxDownstreamPrintTargs_help; /**< @brief Number of targets to print downstream of CNV in 'auxOutput' file help description.  */
  char * origReadDepths_arg;	/**< @brief Matrix of unnormalized read-depths to use for CNV annotation, where rows (samples) and columns (targets) are labeled.  */
  char * origReadDepths_orig;	/**< @brief Matrix of unnormalized read-depths to use for CNV annotation, where rows (samples) and columns (targets) are labeled original value given at command line.  */
  const char *origReadDepths_help; /**< @brief Matrix of unnormalized read-depths to use for CNV annotation, where rows (samples) and columns (targets) are labeled help description.  */
  const char *printHMM_help; /**< @brief  help description.  */
  const char *transition_help; /**< @brief  help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int detailed_help_given ;	/**< @brief Whether detailed-help was given.  */
  unsigned int full_help_given ;	/**< @brief Whether full-help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int referenceFASTA_given ;	/**< @brief Whether referenceFASTA was given.  */
  unsigned int readDepths_given ;	/**< @brief Whether readDepths was given.  */
  unsigned int prepareTargets_given ;	/**< @brief Whether prepareTargets was given.  */
  unsigned int targets_given ;	/**< @brief Whether targets was given.  */
  unsigned int mergedTargets_given ;	/**< @brief Whether mergedTargets was given.  */
  unsigned int mergeGATKdepths_given ;	/**< @brief Whether mergeGATKdepths was given.  */
  unsigned int GATKdepths_given ;	/**< @brief Whether GATKdepths was given.  */
  unsigned int GATKdepthsList_given ;	/**< @brief Whether GATKdepthsList was given.  */
  unsigned int sampleIDmap_given ;	/**< @brief Whether sampleIDmap was given.  */
  unsigned int fromID_given ;	/**< @brief Whether fromID was given.  */
  unsigned int toID_given ;	/**< @brief Whether toID was given.  */
  unsigned int columnSuffix_given ;	/**< @brief Whether columnSuffix was given.  */
  unsigned int rdPrecision_given ;	/**< @brief Whether rdPrecision was given.  */
  unsigned int outputTargetsBySamples_given ;	/**< @brief Whether outputTargetsBySamples was given.  */
  unsigned int matrix_given ;	/**< @brief Whether matrix was given.  */
  unsigned int excludeTargets_given ;	/**< @brief Whether excludeTargets was given.  */
  unsigned int excludeChromosomeTargets_given ;	/**< @brief Whether excludeChromosomeTargets was given.  */
  unsigned int excludeSamples_given ;	/**< @brief Whether excludeSamples was given.  */
  unsigned int minTargetSize_given ;	/**< @brief Whether minTargetSize was given.  */
  unsigned int maxTargetSize_given ;	/**< @brief Whether maxTargetSize was given.  */
  unsigned int minMeanTargetRD_given ;	/**< @brief Whether minMeanTargetRD was given.  */
  unsigned int maxMeanTargetRD_given ;	/**< @brief Whether maxMeanTargetRD was given.  */
  unsigned int minSdTargetRD_given ;	/**< @brief Whether minSdTargetRD was given.  */
  unsigned int maxSdTargetRD_given ;	/**< @brief Whether maxSdTargetRD was given.  */
  unsigned int minMeanSampleRD_given ;	/**< @brief Whether minMeanSampleRD was given.  */
  unsigned int maxMeanSampleRD_given ;	/**< @brief Whether maxMeanSampleRD was given.  */
  unsigned int minSdSampleRD_given ;	/**< @brief Whether minSdSampleRD was given.  */
  unsigned int maxSdSampleRD_given ;	/**< @brief Whether maxSdSampleRD was given.  */
  unsigned int centerData_given ;	/**< @brief Whether centerData was given.  */
  unsigned int centerType_given ;	/**< @brief Whether centerType was given.  */
  unsigned int zScoreData_given ;	/**< @brief Whether zScoreData was given.  */
  unsigned int outputExcludedTargets_given ;	/**< @brief Whether outputExcludedTargets was given.  */
  unsigned int outputExcludedSamples_given ;	/**< @brief Whether outputExcludedSamples was given.  */
  unsigned int outputMatrix_given ;	/**< @brief Whether outputMatrix was given.  */
  unsigned int PCA_given ;	/**< @brief Whether PCA was given.  */
  unsigned int PCA_saveMemory_given ;	/**< @brief Whether PCA_saveMemory was given.  */
  unsigned int normalize_given ;	/**< @brief Whether normalize was given.  */
  unsigned int normalizeOutput_given ;	/**< @brief Whether normalizeOutput was given.  */
  unsigned int PCnormalizeMethod_given ;	/**< @brief Whether PCnormalizeMethod was given.  */
  unsigned int numPCtoRemove_given ;	/**< @brief Whether numPCtoRemove was given.  */
  unsigned int PVE_mean_factor_given ;	/**< @brief Whether PVE_mean_factor was given.  */
  unsigned int PVE_contrib_given ;	/**< @brief Whether PVE_contrib was given.  */
  unsigned int PCAfiles_given ;	/**< @brief Whether PCAfiles was given.  */
  unsigned int createDB_given ;	/**< @brief Whether createDB was given.  */
  unsigned int discover_given ;	/**< @brief Whether discover was given.  */
  unsigned int xcnv_given ;	/**< @brief Whether xcnv was given.  */
  unsigned int optDiscover_given ;	/**< @brief Whether optDiscover was given.  */
  unsigned int discoverSomeQualThresh_given ;	/**< @brief Whether discoverSomeQualThresh was given.  */
  unsigned int posteriorFiles_given ;	/**< @brief Whether posteriorFiles was given.  */
  unsigned int genotype_given ;	/**< @brief Whether genotype was given.  */
  unsigned int gxcnv_given ;	/**< @brief Whether gxcnv was given.  */
  unsigned int vcf_given ;	/**< @brief Whether vcf was given.  */
  unsigned int subsegments_given ;	/**< @brief Whether subsegments was given.  */
  unsigned int maxTargetsInSubsegment_given ;	/**< @brief Whether maxTargetsInSubsegment was given.  */
  unsigned int genotypeQualThresholdWhenNoExact_given ;	/**< @brief Whether genotypeQualThresholdWhenNoExact was given.  */
  unsigned int paramFile_given ;	/**< @brief Whether paramFile was given.  */
  unsigned int DB_given ;	/**< @brief Whether DB was given.  */
  unsigned int maxNormalizedReadDepthVal_given ;	/**< @brief Whether maxNormalizedReadDepthVal was given.  */
  unsigned int maxQualScore_given ;	/**< @brief Whether maxQualScore was given.  */
  unsigned int scorePrecision_given ;	/**< @brief Whether scorePrecision was given.  */
  unsigned int aux_xcnv_given ;	/**< @brief Whether aux_xcnv was given.  */
  unsigned int auxUpstreamPrintTargs_given ;	/**< @brief Whether auxUpstreamPrintTargs was given.  */
  unsigned int auxDownstreamPrintTargs_given ;	/**< @brief Whether auxDownstreamPrintTargs was given.  */
  unsigned int origReadDepths_given ;	/**< @brief Whether origReadDepths was given.  */
  unsigned int printHMM_given ;	/**< @brief Whether printHMM was given.  */
  unsigned int transition_given ;	/**< @brief Whether transition was given.  */

  int PCA_mode_counter; /**< @brief Counter for mode PCA */
  int discover_mode_counter; /**< @brief Counter for mode discover */
  int genotype_mode_counter; /**< @brief Counter for mode genotype */
  int matrix_mode_counter; /**< @brief Counter for mode matrix */
  int mergeGATKdepths_mode_counter; /**< @brief Counter for mode mergeGATKdepths */
  int normalize_mode_counter; /**< @brief Counter for mode normalize */
  int prepareTargets_mode_counter; /**< @brief Counter for mode prepareTargets */
  int printHMM_mode_counter; /**< @brief Counter for mode printHMM */
  int transition_mode_counter; /**< @brief Counter for mode transition */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];
/** @brief all the lines making the full help output (including hidden options) */
extern const char *gengetopt_args_info_full_help[];
/** @brief all the lines making the detailed help output (including hidden options and details) */
extern const char *gengetopt_args_info_detailed_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the full help (including hidden options)
 */
void cmdline_parser_print_full_help(void);
/**
 * Print the detailed help (including hidden options and details)
 */
void cmdline_parser_print_detailed_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * The config file parser (deprecated version)
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_config_file() instead
 */
int cmdline_parser_configfile (const char *filename,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The config file parser
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_config_file (const char *filename,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *cmdline_parser_centerType_values[];  /**< @brief Possible values for centerType. */
extern const char *cmdline_parser_PCnormalizeMethod_values[];  /**< @brief Possible values for PCnormalizeMethod. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* XHMMCMDLINE_H */
